# Copyright 2016 Dennis Vriend
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

// This file contains the general settings which are shared in all akka-persistence-jdbc tests

akka {
  stdout-loglevel = off // defaults to WARNING can be disabled with off. The stdout-loglevel is only in effect during system startup and shutdown
  log-dead-letters-during-shutdown = on
  loglevel = debug
  log-dead-letters = on
  log-config-on-start = off // Log the complete configuration at INFO level when the actor system is started

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = off // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = off // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = off // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }
  }
}

docker {
  host = "localhost"
  host = ${?VM_HOST}
}

jdbc-journal {
  logicalDelete = ${akka-persistence-jdbc.logicalDeletion.enable}
  event-adapters {
    test-write-event-adapter = "akka.persistence.jdbc.query.EventAdapterTest$TestWriteEventAdapter"
    test-read-event-adapter  = "akka.persistence.jdbc.query.EventAdapterTest$TestReadEventAdapter"
  }

  event-adapter-bindings {
    "akka.persistence.jdbc.query.EventAdapterTest$Event"            = test-write-event-adapter
    "akka.persistence.jdbc.query.EventAdapterTest$TaggedEvent"      = test-write-event-adapter
    "akka.persistence.jdbc.query.EventAdapterTest$TaggedAsyncEvent" = test-write-event-adapter
    "akka.persistence.jdbc.query.EventAdapterTest$EventAdapted"     = test-read-event-adapter
  }
}


jdbc-read-journal {
  includeLogicallyDeleted = ${akka-persistence-jdbc.logicalDeletion.enable}
  refresh-interval = "10ms"
  max-buffer-size = "500"
}

slick.db.idleTimeout = 10000 // 10 seconds