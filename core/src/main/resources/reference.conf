# Copyright 2016 Dennis Vriend
# Copyright (C) 2019 - 2022 Lightbend Inc. <https://www.lightbend.com>

akka-persistence-jdbc {

  # The tag separator to use when tagging events with more than one tag.
  # This property affects jdbc-journal.tagSeparator and jdbc-read-journal.tagSeparator.
  tagSeparator = ","

  database-provider-fqcn = "akka.persistence.jdbc.db.DefaultSlickDatabaseProvider"

  shared-databases {
    // Shared databases can be defined here.
    // This reference config contains a partial example if a shared database which is enabled by configuring "slick" as the shared db
    // this example is ignored by default as long as no profile is default
    slick {

      # This property indicates which profile must be used by Slick.
      # Possible values are:
      #  - slick.jdbc.PostgresProfile$
      #  - slick.jdbc.MySQLProfile$
      #  - slick.jdbc.H2Profile$
      #  - slick.jdbc.SQLServerProfile$
      #  - slick.jdbc.OracleProfile$
      # (uncomment and set the property below to match your needs)
      # profile = "slick.jdbc.PostgresProfile$"

      db {
        connectionPool = "HikariCP"

        # The JDBC URL for the chosen database
        # (uncomment and set the property below to match your needs)
        # url = "jdbc:postgresql://localhost:5432/akka-plugin"

        # The database username
        # (uncomment and set the property below to match your needs)
        # user = "akka-plugin"

        # The username's password
        # (uncomment and set the property below to match your needs)
        # password = "akka-plugin"

        # The JDBC driver to use
        # (uncomment and set the property below to match your needs)
        # driver = "org.postgresql.Driver"

        # hikariCP settings; see: https://github.com/brettwooldridge/HikariCP
        # Slick will use an async executor with a fixed size queue of 10.000 objects
        # The async executor is a connection pool for asynchronous execution of blocking I/O actions.
        # This is used for the asynchronous query execution API on top of blocking back-ends like JDBC.
        queueSize = 10000 // number of objects that can be queued by the async executor

        # This property controls the maximum number of milliseconds that a client (that's you) will wait for a connection
        # from the pool. If this time is exceeded without a connection becoming available, a SQLException will be thrown.
        # 1000ms is the minimum value. Default: 180000 (3 minutes)
        connectionTimeout = 180000

        # This property controls the maximum amount of time that a connection will be tested for aliveness.
        # This value must be less than the connectionTimeout. The lowest accepted validation timeout is 1000ms (1 second). Default: 5000
        validationTimeout = 5000

        # 10 minutes: This property controls the maximum amount of time that a connection is allowed to sit idle in the pool.
        # Whether a connection is retired as idle or not is subject to a maximum variation of +30 seconds, and average variation
        # of +15 seconds. A connection will never be retired as idle before this timeout. A value of 0 means that idle connections
        # are never removed from the pool. Default: 600000 (10 minutes)
        idleTimeout = 600000

        # 30 minutes: This property controls the maximum lifetime of a connection in the pool. When a connection reaches this timeout
        # it will be retired from the pool, subject to a maximum variation of +30 seconds. An in-use connection will never be retired,
        # only when it is closed will it then be removed. We strongly recommend setting this value, and it should be at least 30 seconds
        # less than any database-level connection timeout. A value of 0 indicates no maximum lifetime (infinite lifetime),
        # subject of course to the idleTimeout setting. Default: 1800000 (30 minutes)
        maxLifetime = 1800000

        # This property controls the amount of time that a connection can be out of the pool before a message is logged indicating a
        # possible connection leak. A value of 0 means leak detection is disabled.
        # Lowest acceptable value for enabling leak detection is 2000 (2 secs). Default: 0
        leakDetectionThreshold = 0

        # ensures that the database does not get dropped while we are using it
        keepAliveConnection = on

        # See some tips on thread/connection pool sizing on https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
        # Keep in mind that the number of threads must equal the maximum number of connections.
        numThreads = 20
        maxConnections = 20
        minConnections = 20
      }
    }
  }
}

# the akka-persistence-journal in use
jdbc-journal {
  class = "akka.persistence.jdbc.journal.JdbcAsyncWriteJournal"

  tables {

    # Only used in pre 5.0.0 Dao
    legacy_journal {
      tableName = "journal"
      schemaName = ""

      columnNames {
        ordering = "ordering"
        deleted = "deleted"
        persistenceId = "persistence_id"
        sequenceNumber = "sequence_number"
        created = "created"
        tags = "tags"
        message = "message"
      }
    }

    event_journal {
      tableName = "event_journal"
      schemaName = ""

      columnNames {
        ordering = "ordering"
        deleted = "deleted"
        persistenceId = "persistence_id"
        sequenceNumber = "sequence_number"
        writer = "writer"
        writeTimestamp = "write_timestamp"
        adapterManifest = "adapter_manifest"
        eventPayload = "event_payload"
        eventSerId = "event_ser_id"
        eventSerManifest = "event_ser_manifest"
        metaPayload = "meta_payload"
        metaSerId = "meta_ser_id"
        metaSerManifest = "meta_ser_manifest"
      }
    }

    event_tag {
      tableName = "event_tag"
      schemaName = ""

      columnNames {
        # use for older foreign key.
        eventId = "event_id"
        persistenceId = "persistence_id"
        sequenceNumber = "sequence_number"
        tag = "tag"
      }

      # For rolling updates the event_tag table migration.
      # switch those to enable new region key write and read.
      legacy-tag-key = true
    }

    # Otherwise it would be a pinned dispatcher, see https://github.com/akka/akka/issues/31058
    plugin-dispatcher = "akka.actor.default-dispatcher"
  }

  # The tag separator to use when tagging events with more than one tag.
  # should not be configured directly, but through property akka-persistence-jdbc.tagSeparator
  # in order to keep consistent behavior over write/read sides
  # Only used for the legacy schema
  tagSeparator = ${akka-persistence-jdbc.tagSeparator}

  # If you have data from pre 5.0.0 use the legacy akka.persistence.jdbc.journal.dao.legacy.ByteArrayJournalDao
  # Dao. Migration to the new dao will be added in the future.
  dao = "akka.persistence.jdbc.journal.dao.DefaultJournalDao"

  # The size of the buffer used when queueing up events for batch writing. This number must be bigger then the number
  # of events that may be written concurrently. In other words this number must be bigger than the number of persistent
  # actors that are actively persisting at the same time.
  bufferSize = 1000
  # The maximum size of the batches in which journal rows will be inserted
  batchSize = 400
  # The maximum size of the batches in which journal rows will be read when recovering
  replayBatchSize = 400
  # The maximum number of batch-inserts that may be running concurrently
  parallelism = 8

  # This setting can be used to configure usage of a shared database.
  # To disable usage of a shared database, set to null or an empty string.
  # When set to a non empty string, this setting does two things:
  # - The actor which manages the write-journal will not automatically close the db when the actor stops (since it is shared)
  # - If akka-persistence-jdbc.database-provider-fqcn is set to akka.persistence.jdbc.db.DefaultSlickDatabaseProvider
  #   then the shared database with the given name will be used. (shared databases are configured as part of akka-persistence-jdbc.shared-databases)
  #   Please note that the database will only be shared with the other journals if the use-shared-db is also set
  #   to the same value for these other journals.
  use-shared-db = null

  slick {

    # This property indicates which profile must be used by Slick.
    # Possible values are:
    #  - slick.jdbc.PostgresProfile$
    #  - slick.jdbc.MySQLProfile$
    #  - slick.jdbc.H2Profile$
    #  - slick.jdbc.SQLServerProfile$
    #  - slick.jdbc.OracleProfile$
    # (uncomment and set the property below to match your needs)
    # profile = "slick.jdbc.PostgresProfile$"

    db {
      connectionPool = "HikariCP"

      # The JDBC URL for the chosen database
      # (uncomment and set the property below to match your needs)
      # url = "jdbc:postgresql://localhost:5432/akka-plugin"

      # The database username
      # (uncomment and set the property below to match your needs)
      # user = "akka-plugin"

      # The username's password
      # (uncomment and set the property below to match your needs)
      # password = "akka-plugin"

      # The JDBC driver to use
      # (uncomment and set the property below to match your needs)
      # driver = "org.postgresql.Driver"

      # hikariCP settings; see: https://github.com/brettwooldridge/HikariCP
      # Slick will use an async executor with a fixed size queue of 10.000 objects
      # The async executor is a connection pool for asynchronous execution of blocking I/O actions.
      # This is used for the asynchronous query execution API on top of blocking back-ends like JDBC.
      queueSize = 10000 // number of objects that can be queued by the async executor

      # This property controls the maximum number of milliseconds that a client (that's you) will wait for a connection
      # from the pool. If this time is exceeded without a connection becoming available, a SQLException will be thrown.
      # 1000ms is the minimum value. Default: 180000 (3 minutes)
      connectionTimeout = 180000

      # This property controls the maximum amount of time that a connection will be tested for aliveness.
      # This value must be less than the connectionTimeout. The lowest accepted validation timeout is 1000ms (1 second). Default: 5000
      validationTimeout = 5000

      # 10 minutes: This property controls the maximum amount of time that a connection is allowed to sit idle in the pool.
      # Whether a connection is retired as idle or not is subject to a maximum variation of +30 seconds, and average variation
      # of +15 seconds. A connection will never be retired as idle before this timeout. A value of 0 means that idle connections
      # are never removed from the pool. Default: 600000 (10 minutes)
      idleTimeout = 600000

      # 30 minutes: This property controls the maximum lifetime of a connection in the pool. When a connection reaches this timeout
      # it will be retired from the pool, subject to a maximum variation of +30 seconds. An in-use connection will never be retired,
      # only when it is closed will it then be removed. We strongly recommend setting this value, and it should be at least 30 seconds
      # less than any database-level connection timeout. A value of 0 indicates no maximum lifetime (infinite lifetime),
      # subject of course to the idleTimeout setting. Default: 1800000 (30 minutes)
      maxLifetime = 1800000

      # This property controls the amount of time that a connection can be out of the pool before a message is logged indicating a
      # possible connection leak. A value of 0 means leak detection is disabled.
      # Lowest acceptable value for enabling leak detection is 2000 (2 secs). Default: 0
      leakDetectionThreshold = 0

      # ensures that the database does not get dropped while we are using it
      keepAliveConnection = on

      # See some tips on thread/connection pool sizing on https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
      # Keep in mind that the number of threads must equal the maximum number of connections.
      numThreads = 20
      maxConnections = 20
      minConnections = 20
    }
  }
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  class = "akka.persistence.jdbc.snapshot.JdbcSnapshotStore"

  tables {
    legacy_snapshot {
      tableName = "snapshot"
      schemaName = ""
      columnNames {
        persistenceId = "persistence_id"
        sequenceNumber = "sequence_number"
        created = "created"
        snapshot = "snapshot"
      }
    }

    snapshot {
      tableName = "snapshot"
      schemaName = ""
      columnNames {
        persistenceId = "persistence_id"
        sequenceNumber = "sequence_number"
        created = "created"

        snapshotPayload = "snapshot_payload"
        snapshotSerId = "snapshot_ser_id"
        snapshotSerManifest = "snapshot_ser_manifest"

        metaPayload = "meta_payload"
        metaSerId = "meta_ser_id"
        metaSerManifest = "meta_ser_manifest"
      }
    }

    # Otherwise it would be a pinned dispatcher, see https://github.com/akka/akka/issues/31058
    plugin-dispatcher = "akka.actor.default-dispatcher"
  }

  # This setting can be used to configure usage of a shared database.
  # To disable usage of a shared database, set to null or an empty string.
  # When set to a non empty string, this setting does two things:
  # - The actor which manages the snapshot-journal will not automatically close the db when the actor stops (since it is shared)
  # - If akka-persistence-jdbc.database-provider-fqcn is set to akka.persistence.jdbc.db.DefaultSlickDatabaseProvider
  #   then the shared database with the given name will be used. (shared databases are configured as part of akka-persistence-jdbc.shared-databases)
  #   Please note that the database will only be shared with the other journals if the use-shared-db is also set
  #   to the same value for these other journals.
  use-shared-db = null

  dao = "akka.persistence.jdbc.snapshot.dao.DefaultSnapshotDao"

  slick {

    # This property indicates which profile must be used by Slick.
    # Possible values are:
    #  - slick.jdbc.PostgresProfile$
    #  - slick.jdbc.MySQLProfile$
    #  - slick.jdbc.H2Profile$
    #  - slick.jdbc.SQLServerProfile$
    #  - slick.jdbc.OracleProfile$
    # (uncomment and set the property below to match your needs)
    # profile = "slick.jdbc.PostgresProfile$"

    db {
      connectionPool = "HikariCP"

      # The JDBC URL for the chosen database
      # (uncomment and set the property below to match your needs)
      # url = "jdbc:postgresql://localhost:5432/akka-plugin"

      # The database username
      # (uncomment and set the property below to match your needs)
      # user = "akka-plugin"

      # The username's password
      # (uncomment and set the property below to match your needs)
      # password = "akka-plugin"

      # The JDBC driver to use
      # (uncomment and set the property below to match your needs)
      # driver = "org.postgresql.Driver"

      # hikariCP settings; see: https://github.com/brettwooldridge/HikariCP
      # Slick will use an async executor with a fixed size queue of 10.000 objects
      # The async executor is a connection pool for asynchronous execution of blocking I/O actions.
      # This is used for the asynchronous query execution API on top of blocking back-ends like JDBC.
      queueSize = 10000 // number of objects that can be queued by the async executor

      # This property controls the maximum number of milliseconds that a client (that's you) will wait for a connection
      # from the pool. If this time is exceeded without a connection becoming available, a SQLException will be thrown.
      # 1000ms is the minimum value. Default: 180000 (3 minutes)
      connectionTimeout = 180000

      # This property controls the maximum amount of time that a connection will be tested for aliveness.
      # This value must be less than the connectionTimeout. The lowest accepted validation timeout is 1000ms (1 second). Default: 5000
      validationTimeout = 5000

      # 10 minutes: This property controls the maximum amount of time that a connection is allowed to sit idle in the pool.
      # Whether a connection is retired as idle or not is subject to a maximum variation of +30 seconds, and average variation
      # of +15 seconds. A connection will never be retired as idle before this timeout. A value of 0 means that idle connections
      # are never removed from the pool. Default: 600000 (10 minutes)
      idleTimeout = 600000

      # 30 minutes: This property controls the maximum lifetime of a connection in the pool. When a connection reaches this timeout
      # it will be retired from the pool, subject to a maximum variation of +30 seconds. An in-use connection will never be retired,
      # only when it is closed will it then be removed. We strongly recommend setting this value, and it should be at least 30 seconds
      # less than any database-level connection timeout. A value of 0 indicates no maximum lifetime (infinite lifetime),
      # subject of course to the idleTimeout setting. Default: 1800000 (30 minutes)
      maxLifetime = 1800000

      # This property controls the amount of time that a connection can be out of the pool before a message is logged indicating a
      # possible connection leak. A value of 0 means leak detection is disabled.
      # Lowest acceptable value for enabling leak detection is 2000 (2 secs). Default: 0
      leakDetectionThreshold = 0

      # ensures that the database does not get dropped while we are using it
      keepAliveConnection = on

      # See some tips on thread/connection pool sizing on https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
      # Keep in mind that the number of threads must equal the maximum number of connections.
      numThreads = 20
      maxConnections = 20
      minConnections = 20
    }
  }
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  class = "akka.persistence.jdbc.query.JdbcReadJournalProvider"

  # Absolute path to the write journal plugin configuration section.
  # Read journal uses event adapters from the write plugin
  # to adapt events.
  write-plugin = "jdbc-journal"

  # New events are retrieved (polled) with this interval.
  refresh-interval = "1s"

  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = "500"

  # Number of 'max-buffer-size's to limit each events by tag query to
  #
  # Events by tag will fetch batches of elements limiting both using the DB LIMIT support and
  # the "ordering" column of the journal. When executing a query starting from the beginning of the
  # journal, for example adding a new projection to an existing application with a large number
  # of already persisted events this can cause performance problems in some databases.
  #
  # This factor limits the "slices" of ordering the journal is queried for into smaller chunks,
  # issuing more queries where each query covers a smaller slice of the journal instead of one
  # covering the entire journal.
  #
  # Note that setting this too low will have a performance overhead in many queries being issued where
  # each query returns no or very few entries, but what number is to low depends on how many tags are
  # used and how well those are distributed, setting this value requires application specific benchmarking
  # to find a good number.
  #
  # 0 means disable the factor and query the entire journal and limit to max-buffer-size elements
  events-by-tag-buffer-sizes-per-query = 0

  # If enabled, automatically close the database connection when the actor system is terminated
  add-shutdown-hook = true

  # This setting can be used to configure usage of a shared database.
  # To disable usage of a shared database, set to null or an empty string.
  # This setting only has effect if akka-persistence-jdbc.database-provider-fqcn is set to
  # akka.persistence.jdbc.db.DefaultSlickDatabaseProvider. When this setting is set to a non empty string
  # then the shared database with the given name will be used. (shared databases are configured as part of akka-persistence-jdbc.shared-databases)
  # Please note that the database will only be shared with the other journals if the use-shared-db is also set
  # to the same value for these other journals.
  use-shared-db = null

  dao = "akka.persistence.jdbc.query.dao.DefaultReadJournalDao"

  # Settings for determining if ids (ordering column) in the journal are out of sequence.
  journal-sequence-retrieval {
    # The maximum number of ids that will be retrieved in each batch
    batch-size = 10000
    # In case a number in the sequence is missing, this is the amount of retries that will be done to see
    # if the number is still found. Note that the time after which a number in the sequence is assumed missing is
    # equal to maxTries * queryDelay
    # (maxTries may not be zero)
    max-tries = 10
    # How often the actor will query for new data
    query-delay = 1 second
    # The maximum backoff time before trying to query again in case of database failures
    max-backoff-query-delay = 1 minute
    # The ask timeout to use when querying the journal sequence actor, the actor should normally respond very quickly,
    # since it always replies with its current internal state
    ask-timeout = 1 second
  }

  tables {
      legacy_journal = ${jdbc-journal.tables.legacy_journal}
      event_journal = ${jdbc-journal.tables.event_journal}
      event_tag = ${jdbc-journal.tables.event_tag}
  }

  # The tag separator to use when tagging events with more than one tag.
  # should not be configured directly, but through property akka-persistence-jdbc.tagSeparator
  # in order to keep consistent behavior over write/read sides
  tagSeparator = ${akka-persistence-jdbc.tagSeparator}

  slick {

    # This property indicates which profile must be used by Slick.
    # Possible values are:
    #  - slick.jdbc.PostgresProfile$
    #  - slick.jdbc.MySQLProfile$
    #  - slick.jdbc.H2Profile$
    #  - slick.jdbc.SQLServerProfile$
    #  - slick.jdbc.OracleProfile$
    # (uncomment and set the property below to match your needs)
    # profile = "slick.jdbc.PostgresProfile$"

    db {
      connectionPool = "HikariCP"

      # The JDBC URL for the chosen database
      # (uncomment and set the property below to match your needs)
      # url = "jdbc:postgresql://localhost:5432/akka-plugin"

      # The database username
      # (uncomment and set the property below to match your needs)
      # user = "akka-plugin"

      # The username's password
      # (uncomment and set the property below to match your needs)
      # password = "akka-plugin"

      # The JDBC driver to use
      # (uncomment and set the property below to match your needs)
      # driver = "org.postgresql.Driver"

      # hikariCP settings; see: https://github.com/brettwooldridge/HikariCP
      # Slick will use an async executor with a fixed size queue of 10.000 objects
      # The async executor is a connection pool for asynchronous execution of blocking I/O actions.
      # This is used for the asynchronous query execution API on top of blocking back-ends like JDBC.
      queueSize = 10000 // number of objects that can be queued by the async executor

      # This property controls the maximum number of milliseconds that a client (that's you) will wait for a connection
      # from the pool. If this time is exceeded without a connection becoming available, a SQLException will be thrown.
      # 1000ms is the minimum value. Default: 180000 (3 minutes)
      connectionTimeout = 180000

      # This property controls the maximum amount of time that a connection will be tested for aliveness.
      # This value must be less than the connectionTimeout. The lowest accepted validation timeout is 1000ms (1 second). Default: 5000
      validationTimeout = 5000

      # 10 minutes: This property controls the maximum amount of time that a connection is allowed to sit idle in the pool.
      # Whether a connection is retired as idle or not is subject to a maximum variation of +30 seconds, and average variation
      # of +15 seconds. A connection will never be retired as idle before this timeout. A value of 0 means that idle connections
      # are never removed from the pool. Default: 600000 (10 minutes)
      idleTimeout = 600000

      # 30 minutes: This property controls the maximum lifetime of a connection in the pool. When a connection reaches this timeout
      # it will be retired from the pool, subject to a maximum variation of +30 seconds. An in-use connection will never be retired,
      # only when it is closed will it then be removed. We strongly recommend setting this value, and it should be at least 30 seconds
      # less than any database-level connection timeout. A value of 0 indicates no maximum lifetime (infinite lifetime),
      # subject of course to the idleTimeout setting. Default: 1800000 (30 minutes)
      maxLifetime = 1800000

      # This property controls the amount of time that a connection can be out of the pool before a message is logged indicating a
      # possible connection leak. A value of 0 means leak detection is disabled.
      # Lowest acceptable value for enabling leak detection is 2000 (2 secs). Default: 0
      leakDetectionThreshold = 0

      # ensures that the database does not get dropped while we are using it
      keepAliveConnection = on

      # See some tips on thread/connection pool sizing on https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
      # Keep in mind that the number of threads must equal the maximum number of connections.
      numThreads = 20
      maxConnections = 20
      minConnections = 20
    }
  }
}

# the akka-persistence-durable-state-store in use
jdbc-durable-state-store {
  class = "akka.persistence.jdbc.state.JdbcDurableStateStoreProvider"

  # number of records fetched from the store at once
  batchSize = 500
  # New states are retrieved (polled) with this interval.
  refreshInterval = "1s"

  tables {
    durable_state {
      ## The table and column names are not always read and used in SQL statements. If you change
      ## these values you may need to edit some source code
      ## https://github.com/akka/akka-persistence-jdbc/issues/573
      tableName = "durable_state"
      schemaName = ""
      columnNames {
        globalOffset = "global_offset"
        persistenceId = "persistence_id"
        revision = "revision"
        statePayload = "state_payload"
        stateSerId = "state_serial_id"
        stateSerManifest = "state_serial_manifest"
        tag = "tag"
        stateTimestamp = "state_timestamp"
      }
    }
  }

  # Settings for determining if global_offset column in the durable-state are out of sequence.
  durable-state-sequence-retrieval {
    # The maximum number of ids that will be retrieved in each batch
    batch-size = 10000
    # In case a number in the sequence is missing, this is the amount of retries that will be done to see
    # if the number is still found. Note that the time after which a number in the sequence is assumed missing is
    # equal to maxTries * queryDelay
    # (maxTries may not be zero)
    max-tries = 5
    # How often the actor will query for new data
    query-delay = 1 second
    # The maximum backoff time before trying to query again in case of database failures
    max-backoff-query-delay = 1 minute
    # The ask timeout to use when querying the durable-state sequence actor, the actor should normally respond very quickly,
    # since it always replies with its current internal state
    ask-timeout = 1 second
    # cache of revision numbers per persistence id
    revision-cache-capacity = 10000
  }

  slick {

    # This property indicates which profile must be used by Slick.
    # Possible values are:
    #  - slick.jdbc.PostgresProfile$
    #  - slick.jdbc.MySQLProfile$
    #  - slick.jdbc.H2Profile$
    #  - slick.jdbc.SQLServerProfile$
    #  - slick.jdbc.OracleProfile$
    # (uncomment and set the property below to match your needs)
    # profile = "slick.jdbc.PostgresProfile$"

    db {
      connectionPool = "HikariCP"

      # The JDBC URL for the chosen database
      # (uncomment and set the property below to match your needs)
      # url = "jdbc:postgresql://localhost:5432/akka-plugin"

      # The database username
      # (uncomment and set the property below to match your needs)
      # user = "akka-plugin"

      # The username's password
      # (uncomment and set the property below to match your needs)
      # password = "akka-plugin"

      # The JDBC driver to use
      # (uncomment and set the property below to match your needs)
      # driver = "org.postgresql.Driver"

      # hikariCP settings; see: https://github.com/brettwooldridge/HikariCP
      # Slick will use an async executor with a fixed size queue of 10.000 objects
      # The async executor is a connection pool for asynchronous execution of blocking I/O actions.
      # This is used for the asynchronous query execution API on top of blocking back-ends like JDBC.
      queueSize = 10000 // number of objects that can be queued by the async executor

      # This property controls the maximum number of milliseconds that a client (that's you) will wait for a connection
      # from the pool. If this time is exceeded without a connection becoming available, a SQLException will be thrown.
      # 1000ms is the minimum value. Default: 180000 (3 minutes)
      connectionTimeout = 180000

      # This property controls the maximum amount of time that a connection will be tested for aliveness.
      # This value must be less than the connectionTimeout. The lowest accepted validation timeout is 1000ms (1 second). Default: 5000
      validationTimeout = 5000

      # 10 minutes: This property controls the maximum amount of time that a connection is allowed to sit idle in the pool.
      # Whether a connection is retired as idle or not is subject to a maximum variation of +30 seconds, and average variation
      # of +15 seconds. A connection will never be retired as idle before this timeout. A value of 0 means that idle connections
      # are never removed from the pool. Default: 600000 (10 minutes)
      idleTimeout = 600000

      # 30 minutes: This property controls the maximum lifetime of a connection in the pool. When a connection reaches this timeout
      # it will be retired from the pool, subject to a maximum variation of +30 seconds. An in-use connection will never be retired,
      # only when it is closed will it then be removed. We strongly recommend setting this value, and it should be at least 30 seconds
      # less than any database-level connection timeout. A value of 0 indicates no maximum lifetime (infinite lifetime),
      # subject of course to the idleTimeout setting. Default: 1800000 (30 minutes)
      maxLifetime = 1800000

      # This property controls the amount of time that a connection can be out of the pool before a message is logged indicating a
      # possible connection leak. A value of 0 means leak detection is disabled.
      # Lowest acceptable value for enabling leak detection is 2000 (2 secs). Default: 0
      leakDetectionThreshold = 0

      # ensures that the database does not get dropped while we are using it
      keepAliveConnection = on

      # See some tips on thread/connection pool sizing on https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
      # Keep in mind that the number of threads must equal the maximum number of connections.
      numThreads = 20
      maxConnections = 20
      minConnections = 20
    }
  }
}
